server:
  port: ${SERVER_PORT:8081}
  address: 0.0.0.0

spring:
  application:
    name: device-gateway-service
  main:
    allow-circular-references: true
  task:
    scheduling:
      pool:
        size: 1

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    consumer:
      group-id: device-gateway-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      properties:
        allow.auto.create.topics: false
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer
    listener:
      ack-mode: MANUAL_IMMEDIATE

  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}

device-gateway:
  tcp:
    port: ${TCP_PORT:5023}
    boss-threads: ${TCP_BOSS_THREADS:1}
    worker-threads: ${TCP_WORKER_THREADS:0}
    business-threads: ${TCP_BUSINESS_THREADS:4}
    idle-timeout: ${TCP_IDLE_TIMEOUT:300}
    protocol: ${DEFAULT_PROTOCOL:GT06}

  kafka:
    topics:
      device-sessions: device.sessions
      device-location: location.device
      telemetry-inbound: telemetry.inbound
      commands-outbound: commands.outbound

  session:
    cleanup-interval: ${DEVICE_GATEWAY_SESSION_CLEANUP_INTERVAL:300000}  # FIXED: 5 minutes instead of 60s
    idle-timeout-seconds: ${SESSION_IDLE_TIMEOUT_SECONDS:1800}
    max-sessions: ${MAX_SESSIONS:10000}

logging:
  level:
    com.wheelseye.devicegateway: ${LOG_LEVEL:INFO}
    org.springframework.kafka: INFO
    org.springframework.data.redis: WARN
    io.netty: ${NETTY_LOG_LEVEL:WARN}
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
